import java_cup.runtime.*;

import java.util.Map;
import java.util.HashMap;
import it.uniupo.disit.linguaggi2.jflexcup.symboltable.*;

parser code {:

    private SymTable symTable;

    public void reportError(String message) {
        System.out.println(message);
    }

    private TypeDescriptor getResultType(LangType type) {
        return type == LangType.INT_TYPE ? TypeDescriptor.INT : TypeDescriptor.FLOAT;
    }

    private boolean compatible(TypeDescriptor t1, TypeDescriptor t2) {
        return t1 != TypeDescriptor.ERROR && (t1 == t2 || (t1 == TypeDescriptor.FLOAT && t2 == TypeDescriptor.INT));
    }
:};

init with {:
    SymTable.init();
:}

terminal            FLOAT, INT, PRINT;
terminal            ASSIGN;
terminal            PLUS, MINUS, TIMES, DIV;
terminal Integer    INUM;
terminal Float      FNUM;
terminal String     ID;

non terminal            Prog;
non terminal            DSs;
non terminal            Dcl;
non terminal            Stm;
non terminal            Expr;
non terminal            Op;
non terminal            Val;

precedence left PLUS, MINUS;
precedence left TIMES, DIV;

start with Prog;

Prog                    ::= DSs:dss                 {: RESULT = dss; :}
                        ;

DSs                     ::= Dcl DSs
                        | Stm DSs
                        | /* empty */
                        ;

Dcl                     ::= FLOAT ID:id
                                                    {:
                                                        SymTable.enter(id, new Attributes(LangType.FLOAT_TYPE));
                                                        RESULT = TypeDescriptor.FLOAT;
                                                     :}
                        | INT ID:id
                                                    {:
                                                        SymTable.enter(id, new Attributes(LangType.INT_TYPE));
                                                        RESULT = TypeDescriptor.INT;
                                                     :}
                        ;

Stm                     ::= ID:id ASSIGN Expr:expr
                                                    {:
                                                        Attributes attr = SymTable.lookup(id);
                                                        if (attr == null) {
                                                            RESULT = TypeDescriptor.ERROR;
                                                            reportError("id: '" + id + "' never declared");
                                                        } else {
                                                            TypeDescriptor idType = getResultType(attr.getType());
                                                            if (!compatible(idType, (TypeDescriptor) expr)) {
                                                                RESULT = TypeDescriptor.ERROR;
                                                                reportError("type " + idType + " of '" + id + "' not compatible with type " + expr);
                                                            } else {
                                                                RESULT = TypeDescriptor.FLOAT;
                                                            }
                                                        }
                                                     :}
                        | PRINT ID:id
                                                    {:
                                                        Attributes attr = SymTable.lookup(id);
                                                        if (attr == null) {
                                                            RESULT = TypeDescriptor.ERROR;
                                                            reportError("id: '" + id + "' never declared");
                                                        } else {
                                                             RESULT = getResultType(attr.getType());
                                                        }
                                                     :}
                        ;

Expr                    ::= Expr:e1 Op Expr:e2
                                                    {:
                                                        if (e1 == TypeDescriptor.ERROR || e1 == TypeDescriptor.ERROR) {
                                                            RESULT = TypeDescriptor.ERROR;
                                                        } else if (e1 == e2) {
                                                            RESULT = e1;
                                                        } else {
                                                            RESULT = TypeDescriptor.FLOAT;
                                                        }
                                                     :}
                        | Val:val                   {: RESULT = val; :}
                        ;

Op                      ::= PLUS
                        | MINUS
                        | TIMES
                        | DIV
                        ;

Val                     ::= INUM                    {: RESULT = TypeDescriptor.INT; :}
                        | FNUM                      {: RESULT = TypeDescriptor.FLOAT; :}
                        | ID:id
                                                    {:
                                                         Attributes attr = SymTable.lookup(id);
                                                         if (attr == null) {
                                                            RESULT = TypeDescriptor.ERROR;
                                                            reportError("id: '" + id + "' never declared");
                                                         } else {
                                                            RESULT = getResultType(attr.getType());
                                                         }
                                                     :}
                        ;