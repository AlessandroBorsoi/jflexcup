import java_cup.runtime.*;

import java.util.Map;
import java.util.HashMap;
import it.uniupo.disit.linguaggi2.jflexcup.symboltable.*;

parser code {:

    private SymTable symTable;

    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error ");
        if (info instanceof java_cup.runtime.Symbol)
            m.append("(").append(info.toString()).append(")");
        m.append(" : ").append(message);
        System.out.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException("Fatal Syntax Error");
    }

    private TypeDescriptor getResultType(LangType type) {
        return type == LangType.INT_TYPE ? TypeDescriptor.INT : TypeDescriptor.FLOAT;
    }
:};

init with {:
    symTable.init();
:}

terminal            FLOAT, INT, PRINT;
terminal            ASSIGN;
terminal            PLUS, MINUS, TIMES, DIV;
terminal Integer    INUM;
terminal Float      FNUM;
terminal String     ID;

non terminal            Prog;
non terminal            DSs;
non terminal            Dcl;
non terminal            Stm;
non terminal            Expr;
non terminal            Op;
non terminal            Val;

precedence left PLUS, MINUS;
precedence left TIMES, DIV;

start with Prog;

Prog                    ::= DSs
                        ;

DSs                     ::= Dcl DSs
                        | Stm DSs
                        | /* empty */
                        ;

Dcl                     ::= FLOAT ID:id     {: SymTable.enter(id, new Attributes(LangType.FLOAT_TYPE)); :}
                        | INT ID:id         {: SymTable.enter(id, new Attributes(LangType.INT_TYPE)); :}
                        ;

Stm                     ::= ID:id ASSIGN Expr:expr
                        | PRINT ID:id               {: RESULT = getResultType(SymTable.lookup(id).getType()); :}
                        ;

Expr                    ::= Expr Op Expr
                        | Val
                        ;

Op                      ::= PLUS
                        | MINUS
                        | TIMES
                        | DIV
                        ;

Val                     ::= INUM
                        | FNUM
                        | ID:id
                        {:
                             Attributes attr = SymTable.lookup(id);
                             if (attr == null) {
                                RESULT = TypeDescriptor.ERROR;
                                report_error("id: '" + id + "' never declared", id);
                             } else {
                                RESULT = getResultType(attr.getType());
                             }
                         :}
                        ;